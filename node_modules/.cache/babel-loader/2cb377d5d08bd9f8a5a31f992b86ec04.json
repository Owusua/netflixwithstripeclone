{"ast":null,"code":"import _regeneratorRuntime from\"/home/owusua/Videos/mynetflix-clone-papa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/owusua/Videos/mynetflix-clone-papa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/home/owusua/Videos/mynetflix-clone-papa/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import React,{useEffect,useState}from\"react\";import axios from\"./axios\";import\"./Row.css\";import Youtube from\"react-youtube\";import movieTrailer from\"movie-trailer\";import Swal from\"sweetalert2\";function Row(_ref){var title=_ref.title,fetchUrl=_ref.fetchUrl,_ref$isLargeRow=_ref.isLargeRow,isLargeRow=_ref$isLargeRow===void 0?false:_ref$isLargeRow;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),movies=_useState2[0],setMovies=_useState2[1];var base_url=\"https://image.tmdb.org/t/p/original\";var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),myTrailerUrl=_useState4[0],setMyTrailerUrl=_useState4[1];useEffect(function(){function fetchData(){return _fetchData.apply(this,arguments);}function _fetchData(){_fetchData=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var request;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return axios.get(fetchUrl);case 2:request=_context.sent;setMovies(request.data.results);return _context.abrupt(\"return\",request);case 5:case\"end\":return _context.stop();}}},_callee);}));return _fetchData.apply(this,arguments);}fetchData();},[fetchUrl]);var opts={height:\"400\",width:\"100%\",playerVars:{autoplay:1}};var movieClick=function movieClick(movie){if(myTrailerUrl){setMyTrailerUrl(\"\");}else{movieTrailer((movie===null||movie===void 0?void 0:movie.name)||\"\").then(function(url){var urlParams=new URLSearchParams(new URL(url).search);//obtaining the parameters in the url after the question mark.\nsetMyTrailerUrl(urlParams.get(\"v\"));}).catch(function(){Swal.fire({title:\"Sorry\",text:\"The trailer for this movie is not available ðŸ¥º\",icon:\"warning\",confirmButtonText:\"Ok\"});}// alert(\"Trailer URl was not found\"),\n);}};return/*#__PURE__*/_jsxs(\"div\",{className:\"row\",children:[/*#__PURE__*/_jsx(\"h2\",{children:title}),/*#__PURE__*/_jsx(\"div\",{className:\"row__posters\",children:movies.map(function(movie){return(isLargeRow&&movie.poster_path||!isLargeRow&&movie.backdrop_path)&&/*#__PURE__*/_jsx(\"img\",{className:\"row__poster \".concat(isLargeRow&&\"row__posterLarge\"),onClick:function onClick(){return movieClick(movie);},src:\"\".concat(base_url).concat(isLargeRow?movie.poster_path:movie.backdrop_path),alt:movie.name},movie.id);})}),myTrailerUrl&&/*#__PURE__*/_jsx(Youtube,{videoId:myTrailerUrl,opts:opts})]});}export default Row;","map":{"version":3,"sources":["/home/owusua/Videos/mynetflix-clone-papa/src/Row.js"],"names":["React","useEffect","useState","axios","Youtube","movieTrailer","Swal","Row","title","fetchUrl","isLargeRow","movies","setMovies","base_url","myTrailerUrl","setMyTrailerUrl","fetchData","get","request","data","results","opts","height","width","playerVars","autoplay","movieClick","movie","name","then","url","urlParams","URLSearchParams","URL","search","catch","fire","text","icon","confirmButtonText","map","poster_path","backdrop_path","id"],"mappings":"kjBAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,QAA3B,KAA2C,OAA3C,CACA,MAAOC,CAAAA,KAAP,KAAkB,SAAlB,CACA,MAAO,WAAP,CACA,MAAOC,CAAAA,OAAP,KAAoB,eAApB,CACA,MAAOC,CAAAA,YAAP,KAAyB,eAAzB,CACA,MAAOC,CAAAA,IAAP,KAAiB,aAAjB,CAEA,QAASC,CAAAA,GAAT,MAAsD,IAAvCC,CAAAA,KAAuC,MAAvCA,KAAuC,CAAhCC,QAAgC,MAAhCA,QAAgC,sBAAtBC,UAAsB,CAAtBA,UAAsB,0BAAT,KAAS,+BACxBR,QAAQ,CAAC,EAAD,CADgB,wCAC7CS,MAD6C,eACrCC,SADqC,eAEpD,GAAMC,CAAAA,QAAQ,CAAG,qCAAjB,CAFoD,eAGZX,QAAQ,CAAC,EAAD,CAHI,yCAG7CY,YAH6C,eAG/BC,eAH+B,eAKpDd,SAAS,CAAC,UAAM,SACCe,CAAAA,SADD,qIACd,qKACwBb,CAAAA,KAAK,CAACc,GAAN,CAAUR,QAAV,CADxB,QACQS,OADR,eAEEN,SAAS,CAACM,OAAO,CAACC,IAAR,CAAaC,OAAd,CAAT,CAFF,gCAGSF,OAHT,wDADc,4CAMdF,SAAS,GACV,CAPQ,CAON,CAACP,QAAD,CAPM,CAAT,CASA,GAAMY,CAAAA,IAAI,CAAG,CACXC,MAAM,CAAE,KADG,CAEXC,KAAK,CAAE,MAFI,CAGXC,UAAU,CAAE,CACVC,QAAQ,CAAE,CADA,CAHD,CAAb,CAQA,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,KAAD,CAAW,CAC5B,GAAIb,YAAJ,CAAkB,CAChBC,eAAe,CAAC,EAAD,CAAf,CACD,CAFD,IAEO,CACLV,YAAY,CAAC,CAAAsB,KAAK,OAAL,EAAAA,KAAK,SAAL,QAAAA,KAAK,CAAEC,IAAP,GAAe,EAAhB,CAAZ,CACGC,IADH,CACQ,SAACC,GAAD,CAAS,CACb,GAAMC,CAAAA,SAAS,CAAG,GAAIC,CAAAA,eAAJ,CAAoB,GAAIC,CAAAA,GAAJ,CAAQH,GAAR,EAAaI,MAAjC,CAAlB,CAA4D;AAC5DnB,eAAe,CAACgB,SAAS,CAACd,GAAV,CAAc,GAAd,CAAD,CAAf,CACD,CAJH,EAKGkB,KALH,CAMI,UAAM,CACJ7B,IAAI,CAAC8B,IAAL,CAAU,CACR5B,KAAK,CAAE,OADC,CAER6B,IAAI,CAAE,gDAFE,CAGRC,IAAI,CAAE,SAHE,CAIRC,iBAAiB,CAAE,IAJX,CAAV,EAMD,CACD;AAdJ,EAgBD,CACF,CArBD,CAuBA,mBACE,aAAK,SAAS,CAAC,KAAf,wBACE,oBAAK/B,KAAL,EADF,cAEE,YAAK,SAAS,CAAC,cAAf,UACGG,MAAM,CAAC6B,GAAP,CACC,SAACb,KAAD,QACE,CAAEjB,UAAU,EAAIiB,KAAK,CAACc,WAArB,EACE,CAAC/B,UAAD,EAAeiB,KAAK,CAACe,aADxB,gBAEE,YACE,SAAS,uBAAiBhC,UAAU,EAAI,kBAA/B,CADX,CAGE,OAAO,CAAE,yBAAMgB,CAAAA,UAAU,CAACC,KAAD,CAAhB,EAHX,CAIE,GAAG,WAAKd,QAAL,SACDH,UAAU,CAAGiB,KAAK,CAACc,WAAT,CAAuBd,KAAK,CAACe,aADtC,CAJL,CAOE,GAAG,CAAEf,KAAK,CAACC,IAPb,EAEOD,KAAK,CAACgB,EAFb,CAHJ,EADD,CADH,EAFF,CAmBG7B,YAAY,eAAI,KAAC,OAAD,EAAS,OAAO,CAAEA,YAAlB,CAAgC,IAAI,CAAEO,IAAtC,EAnBnB,GADF,CAuBD,CAED,cAAed,CAAAA,GAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport axios from \"./axios\";\nimport \"./Row.css\";\nimport Youtube from \"react-youtube\";\nimport movieTrailer from \"movie-trailer\";\nimport Swal from \"sweetalert2\";\n\nfunction Row({ title, fetchUrl, isLargeRow = false }) {\n  const [movies, setMovies] = useState([]);\n  const base_url = \"https://image.tmdb.org/t/p/original\";\n  const [myTrailerUrl, setMyTrailerUrl] = useState(\"\");\n\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n    fetchData();\n  }, [fetchUrl]);\n\n  const opts = {\n    height: \"400\",\n    width: \"100%\",\n    playerVars: {\n      autoplay: 1,\n    },\n  };\n\n  const movieClick = (movie) => {\n    if (myTrailerUrl) {\n      setMyTrailerUrl(\"\");\n    } else {\n      movieTrailer(movie?.name || \"\")\n        .then((url) => {\n          const urlParams = new URLSearchParams(new URL(url).search); //obtaining the parameters in the url after the question mark.\n          setMyTrailerUrl(urlParams.get(\"v\"));\n        })\n        .catch(\n          () => {\n            Swal.fire({\n              title: \"Sorry\",\n              text: \"The trailer for this movie is not available ðŸ¥º\",\n              icon: \"warning\",\n              confirmButtonText: \"Ok\",\n            });\n          }\n          // alert(\"Trailer URl was not found\"),\n        );\n    }\n  };\n\n  return (\n    <div className=\"row\">\n      <h2>{title}</h2>\n      <div className=\"row__posters\">\n        {movies.map(\n          (movie) =>\n            ((isLargeRow && movie.poster_path) ||\n              (!isLargeRow && movie.backdrop_path)) && (\n              <img\n                className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\n                key={movie.id}\n                onClick={() => movieClick(movie)}\n                src={`${base_url}${\n                  isLargeRow ? movie.poster_path : movie.backdrop_path\n                }`}\n                alt={movie.name}\n              />\n            )\n        )}\n      </div>\n      {myTrailerUrl && <Youtube videoId={myTrailerUrl} opts={opts} />}\n    </div>\n  );\n}\n\nexport default Row;\n"]},"metadata":{},"sourceType":"module"}