{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/owusua/Videos/mynetflix-clone-papa/src/Row.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"./axios\";\nimport \"./Row.css\";\nimport Youtube from \"react-youtube\";\nimport movieTrailer from \"movie-trailer\";\nimport { withSwal } from \"react-sweetalert2\";\n\nfunction Row({\n  title,\n  fetchUrl,\n  isLargeRow = false\n}) {\n  _s();\n\n  const [movies, setMovies] = useState([]);\n  const base_url = \"https://image.tmdb.org/t/p/original\";\n  const [myTrailerUrl, setMyTrailerUrl] = useState(\"\");\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n\n    fetchData();\n  }, [fetchUrl]);\n  const opts = {\n    height: \"400\",\n    width: \"100%\",\n    playerVars: {\n      autoplay: 1\n    }\n  };\n\n  const movieClick = movie => {\n    if (myTrailerUrl) {\n      setMyTrailerUrl(\"\");\n    } else {\n      movieTrailer((movie === null || movie === void 0 ? void 0 : movie.name) || \"\").then(url => {\n        const urlParams = new URLSearchParams(new URL(url).search); //obtaining the parameters in the url after the question mark.\n\n        setMyTrailerUrl(urlParams.get(\"v\"));\n      }).catch(error => console.log(error), // alert(\"Trailer URl was not found\"),\n      this.swal.fire({\n        title: \"Example\",\n        text: \"Swal injected\",\n        icon: \"success\"\n      }));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row__posters\",\n      children: movies.map(movie => (isLargeRow && movie.poster_path || !isLargeRow && movie.backdrop_path) && /*#__PURE__*/_jsxDEV(\"img\", {\n        className: `row__poster ${isLargeRow && \"row__posterLarge\"}`,\n        onClick: () => movieClick(movie),\n        src: `${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n        alt: movie.name\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 15\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), myTrailerUrl && /*#__PURE__*/_jsxDEV(Youtube, {\n      videoId: myTrailerUrl,\n      opts: opts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Row, \"GgbQvAs9b9QOFLKcC5Gj5DVZSgs=\");\n\n_c = Row;\nexport default Row;\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"sources":["/home/owusua/Videos/mynetflix-clone-papa/src/Row.js"],"names":["React","useEffect","useState","axios","Youtube","movieTrailer","withSwal","Row","title","fetchUrl","isLargeRow","movies","setMovies","base_url","myTrailerUrl","setMyTrailerUrl","fetchData","request","get","data","results","opts","height","width","playerVars","autoplay","movieClick","movie","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","swal","fire","text","icon","map","poster_path","backdrop_path","id"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport axios from \"./axios\";\nimport \"./Row.css\";\nimport Youtube from \"react-youtube\";\nimport movieTrailer from \"movie-trailer\";\nimport { withSwal } from \"react-sweetalert2\";\n\nfunction Row({ title, fetchUrl, isLargeRow = false }) {\n  const [movies, setMovies] = useState([]);\n  const base_url = \"https://image.tmdb.org/t/p/original\";\n  const [myTrailerUrl, setMyTrailerUrl] = useState(\"\");\n\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n    fetchData();\n  }, [fetchUrl]);\n\n  const opts = {\n    height: \"400\",\n    width: \"100%\",\n    playerVars: {\n      autoplay: 1,\n    },\n  };\n\n  const movieClick = (movie) => {\n    if (myTrailerUrl) {\n      setMyTrailerUrl(\"\");\n    } else {\n      movieTrailer(movie?.name || \"\")\n        .then((url) => {\n          const urlParams = new URLSearchParams(new URL(url).search); //obtaining the parameters in the url after the question mark.\n          setMyTrailerUrl(urlParams.get(\"v\"));\n        })\n        .catch(\n          (error) => console.log(error),\n          // alert(\"Trailer URl was not found\"),\n          this.swal.fire({\n            title: \"Example\",\n            text: \"Swal injected\",\n            icon: \"success\",\n          })\n        );\n    }\n  };\n\n  return (\n    <div className=\"row\">\n      <h2>{title}</h2>\n      <div className=\"row__posters\">\n        {movies.map(\n          (movie) =>\n            ((isLargeRow && movie.poster_path) ||\n              (!isLargeRow && movie.backdrop_path)) && (\n              <img\n                className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\n                key={movie.id}\n                onClick={() => movieClick(movie)}\n                src={`${base_url}${\n                  isLargeRow ? movie.poster_path : movie.backdrop_path\n                }`}\n                alt={movie.name}\n              />\n            )\n        )}\n      </div>\n      {myTrailerUrl && <Youtube videoId={myTrailerUrl} opts={opts} />}\n    </div>\n  );\n}\n\nexport default Row;\n"]},"metadata":{},"sourceType":"module"}