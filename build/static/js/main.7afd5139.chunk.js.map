{"version":3,"sources":["Requests.js","Nav.js","axios.js","Banner.js","Row.js","screens/HomeScreen.js","firebase.js","screens/SignupScreen.js","screens/LoginScreen.js","features/userSlice.js","screens/PlansScreen.js","screens/ProfileScreen.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Nav","useState","show","handleShow","history","useHistory","transitionNavBar","window","scrollY","useEffect","addEventListener","removeEventListener","className","onClick","push","src","alt","instance","axios","create","baseURL","Banner","string","n","movie","setMovie","a","get","request","data","results","Math","floor","random","length","fetchData","style","backgroundSize","backgroundImage","backdrop_path","backgroundPosition","title","name","original_name","overview","substr","Row","fetchUrl","isLargeRow","movies","setMovies","myTrailerUrl","setMyTrailerUrl","map","poster_path","movieTrailer","then","url","urlParams","URLSearchParams","URL","search","catch","Swal","fire","text","icon","confirmButtonText","movieClick","id","videoId","opts","height","width","playerVars","autoplay","HomeScreen","db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","SignupScreen","emailRef","useRef","passwordRef","ref","type","placeholder","e","preventDefault","signInWithEmailAndPassword","current","value","authUser","console","log","error","alert","message","createUserWithEmailAndPassword","LoginScreen","signIn","setSignIn","userSlice","createSlice","initialState","user","reducers","login","state","action","payload","logout","actions","selectUser","PlansScreen","products","setProducts","useSelector","subscription","setSubscription","collection","doc","uid","querySnapshot","forEach","role","current_period_end","seconds","current_period_start","where","productDoc","docs","price","prices","priceId","priceData","loadCheckout","add","success_url","location","origin","cancel_url","onSnapshot","snap","sessionId","loadStripe","redirectToCheckout","Date","toLocaleDateString","Object","entries","productId","productData","isCurrentPackage","includes","description","ProfileScreen","email","signOut","App","dispatch","useDispatch","onAuthStateChanged","userAuth","path","exact","configureStore","reducer","userReducer","Boolean","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7afd5139.chunk.js","sourcesContent":["const API_KEY = \"1fb36dbbebfb8ce718863e2cc398aebe\";\n\nconst requests = {\n  fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\n  fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\n  fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\n  fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\n  fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\n  fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\n  fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\n  fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\n};\n\nexport default requests;\n","import React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport \"./Nav.css\";\n\nfunction Nav() {\n  const [show, handleShow] = useState(false);\n  const history = useHistory();\n\n  const transitionNavBar = () => {\n    if (window.scrollY > 100) {\n      handleShow(true);\n    } else {\n      handleShow(false);\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", transitionNavBar);\n    return () => window.removeEventListener(\"scroll\", transitionNavBar);\n  }, []);\n\n  return (\n    <div className={`nav ${show && \"nav__black\"}`}>\n      <div className=\"nav__contents\">\n        <img\n          onClick={() => history.push(\"/\")}\n          className=\"nav__logo\"\n          src=\"http://assets.stickpng.com/images/580b57fcd9996e24bc43c529.png\"\n          alt=\"netflix-logo\"\n        />\n        <img\n          onClick={() => history.push(\"/profile\")}\n          className=\"nav__avatar\"\n          src=\"https://pbs.twimg.com/profile_images/1240119990411550720/hBEe3tdn_400x400.png\"\n          alt=\"avatar\"\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default Nav;\n","import axios from \"axios\";\n\nconst instance = axios.create({\n  baseURL: \"https://api.themoviedb.org/3\",\n});\n\nexport default instance;\n","import React, { useEffect, useState } from \"react\";\nimport axios from \"./axios\";\nimport requests from \"./Requests\";\nimport \"./Banner.css\";\n\nfunction Banner() {\n  const [movie, setMovie] = useState([]);\n\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(requests.fetchNetflixOriginals);\n      setMovie(\n        request.data.results[\n          Math.floor(Math.random() * request.data.results.length - 1)\n        ]\n      );\n      return request;\n    }\n    fetchData();\n  }, []);\n\n  function truncate(string, n) {\n    return string?.length > n ? string.substr(0, n - 1) + \"...\" : string;\n  }\n\n  return (\n    <header\n      className=\"banner\"\n      style={{\n        backgroundSize: \"cover\",\n        backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\n        backgroundPosition: \"center center\",\n      }}\n    >\n      <div className=\"banner__contents\">\n        <h1 className=\"banner__title\">\n          {movie?.title || movie?.name || movie?.original_name}\n        </h1>\n        <div className=\"banner__buttons\">\n          <button className=\"banner__button\">Play</button>\n          <button className=\"banner__button\">My List</button>\n        </div>\n        <h1 className=\"banner__description\">\n          {truncate(movie?.overview, 150)}\n        </h1>\n      </div>\n      <div className=\"banner--fadeBottom\" />\n    </header>\n  );\n}\n\nexport default Banner;\n","import React, { useEffect, useState } from \"react\";\nimport axios from \"./axios\";\nimport \"./Row.css\";\nimport Youtube from \"react-youtube\";\nimport movieTrailer from \"movie-trailer\";\nimport Swal from \"sweetalert2\";\n\nfunction Row({ title, fetchUrl, isLargeRow = false }) {\n  const [movies, setMovies] = useState([]);\n  const base_url = \"https://image.tmdb.org/t/p/original\";\n  const [myTrailerUrl, setMyTrailerUrl] = useState(\"\");\n\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n    fetchData();\n  }, [fetchUrl]);\n\n  const opts = {\n    height: \"400\",\n    width: \"100%\",\n    playerVars: {\n      autoplay: 1,\n    },\n  };\n\n  const movieClick = (movie) => {\n    if (myTrailerUrl) {\n      setMyTrailerUrl(\"\");\n    } else {\n      movieTrailer(movie?.name || \"\")\n        .then((url) => {\n          const urlParams = new URLSearchParams(new URL(url).search); //obtaining the parameters in the url after the question mark.\n          setMyTrailerUrl(urlParams.get(\"v\"));\n        })\n        .catch(\n          () => {\n            Swal.fire({\n              title: \"Sorry\",\n              text: \"The trailer for this movie is not available 🥺\",\n              icon: \"warning\",\n              confirmButtonText: \"Ok\",\n            });\n          }\n          // alert(\"Trailer URl was not found\"),\n        );\n    }\n  };\n\n  return (\n    <div className=\"row\">\n      <h2>{title}</h2>\n      <div className=\"row__posters\">\n        {movies.map(\n          (movie) =>\n            ((isLargeRow && movie.poster_path) ||\n              (!isLargeRow && movie.backdrop_path)) && (\n              <img\n                className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\n                key={movie.id}\n                onClick={() => movieClick(movie)}\n                src={`${base_url}${\n                  isLargeRow ? movie.poster_path : movie.backdrop_path\n                }`}\n                alt={movie.name}\n              />\n            )\n        )}\n      </div>\n      {myTrailerUrl && <Youtube videoId={myTrailerUrl} opts={opts} />}\n    </div>\n  );\n}\n\nexport default Row;\n","import React from \"react\";\nimport requests from \"../Requests\";\nimport Nav from \"../Nav\";\nimport Banner from \"../Banner\";\nimport Row from \"../Row\";\nimport \"./HomeScreen.css\";\n\nfunction HomeScreen() {\n  return (\n    <div className=\"homeScreen\">\n      <Nav />\n\n      <Banner />\n\n      <Row\n        title=\"NETFLIX ORIGINALS\"\n        fetchUrl={requests.fetchNetflixOriginals}\n        isLargeRow\n      />\n      <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending} />\n      <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated} />\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies} />\n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />\n      <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies} />\n      <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies} />\n      <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries} />\n    </div>\n  );\n}\n\nexport default HomeScreen;\n","import firebase from \"firebase\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAon4zwli8CHjI0iVTcRb7PUHnfliar6aA\",\n  authDomain: \"newnetflixclone.firebaseapp.com\",\n  projectId: \"newnetflixclone\",\n  storageBucket: \"newnetflixclone.appspot.com\",\n  messagingSenderId: \"330357266932\",\n  appId: \"1:330357266932:web:8d5f4ff9aafd27005981a1\",\n  measurementId: \"G-HC3R8L41X3\",\n};\n\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\nconst db = firebaseApp.firestore();\nconst auth = firebase.auth();\n\nexport { auth };\nexport default db;\n","import React, { useRef } from \"react\";\nimport { auth } from \"../firebase\";\nimport \"./SignupScreen.css\";\n\nfunction SignupScreen() {\n  const emailRef = useRef(null);\n  const passwordRef = useRef(null);\n\n  const register = (e) => {\n    e.preventDefault();\n    auth\n      .createUserWithEmailAndPassword(\n        emailRef.current.value,\n        passwordRef.current.value\n      )\n      .then((authUser) => {\n        console.log(authUser);\n      })\n      .catch((error) => {\n        alert(error.message);\n      });\n  };\n\n  const signIn = (e) => {\n    e.preventDefault();\n    auth\n      .signInWithEmailAndPassword(\n        emailRef.current.value,\n        passwordRef.current.value\n      )\n      .then((authUser) => {\n        console.log(authUser);\n      })\n      .catch((error) => alert(error.message));\n  };\n\n  return (\n    <div className=\"signupScreen\">\n      <form>\n        <h1>Sign In</h1>\n        <input ref={emailRef} type=\"email\" placeholder=\"Email\" />\n        <input ref={passwordRef} type=\"password\" placeholder=\"Password\" />\n        <button type=\"submit\" onClick={signIn}>\n          Sign In\n        </button>\n        <h4>\n          <span className=\"signupScreen__gray\">New to Netflix?</span>{\" \"}\n          <span className=\"signupScreen__link\" onClick={register}>\n            Sign Up now\n          </span>\n        </h4>\n      </form>\n    </div>\n  );\n}\n\nexport default SignupScreen;\n","import React, { useState } from \"react\";\nimport \"./LoginScreen.css\";\nimport SignupScreen from \"./SignupScreen\";\n\nfunction LoginScreen() {\n  const [signIn, setSignIn] = useState(false);\n\n  return (\n    <div className=\"loginScreen\">\n      <div className=\"loginScreen__background\">\n        <img\n          className=\"loginScreen__logo\"\n          src=\"https://assets.stickpng.com/images/580b57fcd9996e24bc43c529.png\"\n          alt=\"\"\n        />\n        <button className=\"loginScreen__button\" onClick={() => setSignIn(true)}>\n          Sign In\n        </button>\n        <div className=\"loginScreen__gradient\" />\n      </div>\n      <div className=\"loginScreen__body\">\n        {signIn ? (\n          <SignupScreen />\n        ) : (\n          <>\n            <h1>Unlimited films, TV programmes and more</h1>\n            <h2>Watch anywhere. Cancel at any time.</h2>\n            <h3>\n              Ready to watch? Enter your email to create or restart you\n              membership.\n            </h3>\n            <div className=\"loginScreen__input\">\n              <form>\n                <input type=\"email\" placeholder=\"Email Address\" />\n                <button\n                  className=\"loginScreen__getStarted\"\n                  onClick={() => setSignIn(true)}\n                >\n                  GET STARTED\n                </button>\n              </form>\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default LoginScreen;\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const userSlice = createSlice({\r\n  name: \"user\",\r\n  initialState: {\r\n    user: null,\r\n  },\r\n  reducers: {\r\n    //login and logout are actions to be dispatched to the the App.js to be used\r\n    login: (state, action) => {\r\n      state.user = action.payload;\r\n    },\r\n    logout: (state) => {\r\n      state.user = null;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { login, logout } = userSlice.actions;\r\n\r\nexport const selectUser = (state) => state.user.user; // the selector is used to get information from the store\r\n\r\nexport default userSlice.reducer;\r\n","import React, { useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectUser } from \"../features/userSlice\";\nimport db from \"../firebase\";\nimport \"./PlansScreen.css\";\nimport { loadStripe } from \"@stripe/stripe-js\";\n\nfunction PlansScreen() {\n  const [products, setProducts] = useState([]);\n  const user = useSelector(selectUser);\n  const [subscription, setSubscription] = useState(null);\n\n  useEffect(() => {\n    db.collection(\"customers\")\n      .doc(user.uid)\n      .collection(\"subscriptions\")\n      .get()\n      .then((querySnapshot) => {\n        querySnapshot.forEach(async (subscription) => {\n          setSubscription({\n            role: subscription.data().role,\n            current_period_end: subscription.data().current_period_end.seconds,\n            current_period_start: subscription.data().current_period_start\n              .seconds,\n          });\n        });\n      });\n  }, [user.uid]);\n\n  useEffect(() => {\n    db.collection(\"products\")\n      .where(\"active\", \"==\", true)\n      .get()\n      .then((querySnapshot) => {\n        const products = {};\n        querySnapshot.forEach(async (productDoc) => {\n          products[productDoc.id] = productDoc.data();\n          const priceSnap = await productDoc.ref.collection(\"prices\").get();\n          priceSnap.docs.forEach((price) => {\n            products[productDoc.id].prices = {\n              priceId: price.id,\n              priceData: price.data(),\n            };\n          });\n        });\n        setProducts(products);\n      });\n  }, []);\n  // console.log(products);\n  console.log(subscription);\n  const loadCheckout = async (priceId) => {\n    const docRef = await db\n      .collection(\"customers\")\n      .doc(user.uid)\n      .collection(\"checkout_sessions\")\n      .add({\n        price: priceId,\n        success_url: window.location.origin,\n        cancel_url: window.location.origin,\n      });\n    docRef.onSnapshot(async (snap) => {\n      const { error, sessionId } = snap.data();\n      if (error) {\n        //Show an error to you customer and inspect your Cloud function logs in the Firebase console\n        alert(`An error occured: ${error.message}`);\n      }\n      if (sessionId) {\n        // We have a session, lets redirect to Checkout,\n        //Initialize Stripe\n        const stripe = await loadStripe(\n          \"pk_test_51HQzccJi6cwzy1sivjZse62bFU6ZV4ublhFLH6aMIueBQokwITmhy8NggRSCxyJqXaqwwZ0rbFK4kulwL72Cz8Dl00bbC8fabU\"\n        );\n        stripe.redirectToCheckout({ sessionId });\n      }\n    });\n  };\n  return (\n    <div className=\"plansScreen\">\n      <br />\n      {subscription && (\n        <p>\n          Renewal date :\n          {new Date(\n            subscription?.current_period_end * 1000\n          ).toLocaleDateString()}\n        </p>\n      )}\n      {Object.entries(products).map(([productId, productData]) => {\n        //add some logic to check if users subscription is active\n        const isCurrentPackage = productData.name.includes(subscription?.role);\n        //alternative code\n        // const isCurrentPackage = productData.name?.toLowerCase().includes(subscription?.role);\n        return (\n          <div\n            key={productId}\n            className={`${\n              isCurrentPackage && \"plansScreen__plan--disabled\"\n            } plansScreen__plan`}\n          >\n            <div className=\"planScreen__info\">\n              <h5>{productData.name}</h5>\n              <h5>{productData.description}</h5>\n            </div>\n            <button onClick={() => loadCheckout(productData.prices.priceId)}>\n              {isCurrentPackage ? \"Current Package\" : \"Subscribe\"}\n            </button>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default PlansScreen;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectUser } from \"../features/userSlice\";\nimport { auth } from \"../firebase\";\nimport Nav from \"../Nav\";\nimport PlansScreen from \"./PlansScreen\";\nimport \"./ProfileScreen.css\";\n\nfunction ProfileScreen() {\n  const user = useSelector(selectUser);\n\n  return (\n    <div className=\"profileScreen\">\n      <Nav />\n      <div className=\"profileScreen__body\">\n        <h1>Edit Profile</h1>\n        <div className=\"profileScreen__info\">\n          <img\n            src=\"https://pbs.twimg.com/profile_images/1240119990411550720/hBEe3tdn_400x400.png\"\n            alt=\"\"\n          />\n          <div className=\"profileScreen__details\">\n            <h2>{user.email}</h2>\n            <div className=\"profileScreen__plans\">\n              <h3>Plans</h3>\n              <PlansScreen />\n              {/*<p className=\"profileScreen__renewal\">Renewal Date: 04/03/2021</p>\n              <div className=\"profileScreen__planTypes\">\n                <div className=\"profileScreen__planDetails\">\n                  <span>\n                    Netflix Standard <br />\n                    1080p\n                  </span>\n                  <button className=\"profileScreen__subscribe\">\n                    Subscribe\n                  </button>\n                </div>\n                <div className=\"profileScreen__planDetails\">\n                  <span>\n                    Netflix Basic <br /> 400p\n                  </span>\n                  <button className=\"profileScreen__subscribe\">\n                    Subscribe\n                  </button>\n                </div>\n                <div className=\"profileScreen__planDetails\">\n                  <span>\n                    Netflix Premium\n                    <br />\n                    4k+HDR\n                  </span>\n                  <button className=\"profileScreen__currentPackage\">\n                    {\" \"}\n                    Current Package\n                  </button>\n                </div>\n              </div>*/}\n              <button\n                onClick={() => auth.signOut()}\n                className=\"profileScreen__signOut\"\n              >\n                Sign out\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default ProfileScreen;\n","import React, { useEffect } from \"react\";\r\nimport HomeScreen from \"./screens/HomeScreen\";\r\nimport \"./App.css\";\r\nimport LoginScreen from \"./screens/LoginScreen\";\r\nimport ProfileScreen from \"./screens/ProfileScreen\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport { auth } from \"./firebase\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { logout, login, selectUser } from \"./features/userSlice\";\r\n\r\nfunction App() {\r\n  const user = useSelector(selectUser);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    //this listens to any authentication changes\r\n    const unsubscribe = auth.onAuthStateChanged((userAuth) => {\r\n      if (userAuth) {\r\n        dispatch(\r\n          login({\r\n            uid: userAuth.uid,\r\n            email: userAuth.email,\r\n          })\r\n        );\r\n      } else {\r\n        //logged out\r\n        dispatch(logout());\r\n      }\r\n    });\r\n    return unsubscribe;\r\n  }, [dispatch]);\r\n  return (\r\n    <div className=\"app\">\r\n      <Router>\r\n        {!user ? (\r\n          <LoginScreen />\r\n        ) : (\r\n          <Switch>\r\n            <Route path=\"/profile\">\r\n              <ProfileScreen />\r\n            </Route>\r\n            <Route exact path=\"/\">\r\n              <HomeScreen />\r\n            </Route>\r\n          </Switch>\r\n        )}\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport userReducer from \"../features/userSlice\";\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    user: userReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}